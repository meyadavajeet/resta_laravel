								laravel important commands	_____________________________

 laravel new myFstProject 	//create new project
 php artisan   // show available atisan commands
 php artisan make:migration create_users_table  //create table
 php artisan make:migration add_newColumn_to_tableName_table --table=tableName   //To add column in existing table
 php artisan migrate --force  //To run all of outstanding migration use following command.

 php artisan make:controller ControllerName; //create controller

 migration commands:-
 php artisan migrate; //make default table migration

 php artisan migrate:reset;  //reset migration

 php artisan migrate:rollback  //rollback migration

 php artisan make:migration create_students_table --create student //create specific table through migration student


 GitLab Global Setup

 Git global setup
git config --global user.name "Ajeet Yadav"
git config --global user.email "meyadavajeet@gmail.com"

Create a new repository
git clone git@gitlab.com:meyadavajeet/spring-first-project.git
cd spring-first-project
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master

Push an existing folder
cd existing_folder
git init
git remote add origin git@gitlab.com:meyadavajeet/spring-first-project.git
git add .
git commit -m "Initial commit"
git push -u origin master

Push an existing Git repository
cd existing_repo
git remote rename origin old-origin
git remote add origin git@gitlab.com:meyadavajeet/spring-first-project.git
git push -u origin --all
git push -u origin --tags







some new command of database
CREATE USER 'ajeet'@'%' IDENTIFIED BY 'hubr00t';

GRANT ALL PRIVILEGES ON *.* TO 'ajeet'@'%' WITH GRANT OPTION;

SHOW GRANTS FOR ajeet;

FLUSH PRIVILEGES;



create middleware and how to use it

php artisan make:middleware CustomAuth

register middleware in kernel.php
    protected $middlewareGroups = [
        'web' => [
            \App\Http\Middleware\EncryptCookies::class,
            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
            \Illuminate\Session\Middleware\StartSession::class,
            // \Illuminate\Session\Middleware\AuthenticateSession::class,
            \Illuminate\View\Middleware\ShareErrorsFromSession::class,
            \App\Http\Middleware\VerifyCsrfToken::class,
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
            \App\Http\Middleware\CustomAuth::class,
        ],

        note:-last one is the custom auth.

    Apply middleware on the route

    //applying group route
    Route::group(['middleware'=>'web'],function(){
        Route::get('/','RestaController@index');
        Route::get('/list','RestaController@list');
        Route::view('/add','add');
        Route::post('/add','RestaController@add');
        Route::get('/delete/{id}','RestaController@delete');
        Route::get('/edit/{id}','RestaController@edit');
        Route::post('/edit','RestaController@update');
        Route::view('/register','register');
        Route::post('/register','UsersController@register');
        Route::view('/login','login');
        Route::post('/login','UsersController@login');
        Route::get('/logout','UsersController@logout');
    });


    Restrict user to go on certain url if you are not logged in
       public function handle($request, Closure $next)
        {
            $path = $request->path();
            if(($path =='login' || $path =='register') && Session::get('user')){
                return  redirect('/');
            }
            elseif (($path !='login' && !Session::get('user')) && ($path !='register' && !Session::get('user'))){
                return  redirect('login');
            }
            return $next($request);
        }






